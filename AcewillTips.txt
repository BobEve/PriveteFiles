1.没有开发规范
2.没有架构设计
3.没有明确需求

1.没有一定的开发规范，对团队协作影响比较大。
	1.代码结构
	2.代码风格
	3.文件、资源命名
	1、2影响团队成员对代码的直观理解，提高了代码合并带来的风险和时间成本
	3可能会导致资源冲突、资源重复、查找困难
2.没有架构设计，开发过程导致代码臃肿、结构不合理。主要影响持续开发、后续维护、
项目稳定性
3.比较认可程序员的效率不仅仅来自自身的开发水平，工具是否完善，合理需求对开发效率的
影响也是非常大的。软件开发是有一个最终目标的，开发工作进行之前，对软件整体功能、
需求、目标用户应该是理解的。 但是我发现并不是我新入职对需求不理解，同组同事对需求
也不是很了解，业务和开发应该是协作关系而不是对立。
对组内开发的建议：
1.对代码结构、风格、命名达成共识，并实行。
2.对项目进行基本的架构设计，考虑后续的功能迭代
	1.基本单元引入MVP等设计模式
	2.拆分基础功能模块、业务功能模块，为后续组件化打好基础

对项目开发的建议，敏捷开发
1.组建项目Team：
	开发、测试、产品、业务组成开发Team，设立项目Owner
2.交付周期达成共识-开发周期、测试周期、发布、部署周期
3.工作流标识项目流转状态：
	需求提出->需求明确->进入排期->进入开发->进入测试->测试完成->进入发布
	每一个状态由对应角色在工具上面标识，eg：开发人员标识开发中、开发完成等
4.实行白板站会-白板是看得见的进度，对应人员领取任务后续要在站会更新进度。站会
可以克服大家做到那里开会的一些弊端，提高效率，时间掌握在30分钟左右。
5.克服初期不适应，达成共识
流程心得
1.项目立项开始全Team成员参加
	1.需求梳理-需求review，保证项目组成员对需求的完整理解和认可
	2.明白项目目标
	3.提高需求到达率和准确率
2.梳理需求-设立需求完成度，达到完成度需求(一个标准)在迭代开始时进入迭代环节
	1.Team一起对需求设立标准，达到标准进入迭代否则进入下一个周期
	2.运营、产品进一步确认需求流程和核心功能，开发人员关注技术实现方案
3.拆分需求-重要程度、用户路径
	1.确认核心功能，达成优先级共识
	2.后续迭代进行功能完善、补充
4.任务领取
	1.明确时间
	2.时间预估有困难-个人预估时间->对比->讨论
	3.每日站会更新时间
	4.每日站会对相关依赖任务说明，风险预报
5.测试用例-冒烟测试
	1.开发完成后需要通过冒烟测试，通过比例Team共同达成共识
6.提测
	1.QA进行测试工作
	2.产品、运营参与体验
7.回归、总结
敏捷过程的一些体验
1.最小可用交付，不求大而全
2.开发过程需要架构和设计，但是不需要太细设计，以任务为目标
3.迭代周期持续重构-迭代时间需要考虑重构，方式技术债累计~~！
4.站会很好、白板很好，看得见的进度
5.回归、总结很重要，是持续进度比较重要的点，需要有具体的产出
6.大家是一个Team，产品狗、程序猿就会是开玩笑的说，业务部门、产品部门、开发部门
之间的了解增强，相互更加信任。个人成长、表达都有进步
7.可持续的开发进度，开发进度不是越快越好，筋疲力尽的开发过程对效率、个人认同感
影响很大
8.对整体流程参与人员设立考察指标，并对指标达成共识
9.跟踪迭代反馈

