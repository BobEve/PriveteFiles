我认为最显著的问题主要有以下几点，基于开发角度：
1. 没有规范的开发流程
2. 没有共同认可的开发规范
3. 客户端开发没有合理的框架架构
4. 服务器接口返回没有统一规则，对客户端开发没有做适配
5. 开发需求不明确，开发人员对需求和项目流程不了解
具体对上面几点的说明
1. 不是所有的需求都是合理的、紧急要做的，不是所有H5实现流程都应该在APP端一丝不变的复刻，APP应该有必要的设计、专场过程和数据流程
	1.1 项目完整开发需要有需求的完整说明和分解过程，产品流程说明，技术设计，开发周期，测试验收过程
2. 没有共同认可的开发规范，对团队协作影响比较大
	2.1 统一的代码结构和代码风格，可以提高写作过程的效率，很好的理解实现过程，降低代码合并带来的风险和时间成本
	2.2 统一的资源、文件命名规范可以防范资源冲突、重复和查找问题，减少包体积
3. 合理的开发框架设计，对项目开发效率、后期代码维护、代码可读性以及持续的迭代开发影响很大
	3.1 合理的架构可以规范开发过程，有效降低低级错误的的发生，防止项目代码和结构臃肿耦合
4. 好的Api接口结构，可以让开发过程更有逻辑和效率
	4.1 现在接口返回数据结构不一致，主要影响就是没有办法做数据的统一处理，需要打补丁似的在不同的地方做不同的处理
	4.2 不能有效的统一处理错误情况
	4.3 接口返回字段不能自说明，大量的不明缩写而且当前版本服务器api文档不完善
5. 之前一句项目管理的说法：程序员的效率不仅仅来自自身的开发水平，工具是否完善，合理需求对开发效率的
影响更加具体。
	5.1 开发过程不能聚焦实现逻辑，而是在开发过程中需要不断提出需求、处理流程等问题
	5.2 开发对项目没有整体的认识，对流程没有整体的了解，这样开发很容易代码混乱重复和低级错误的发生

新入职公司，以上是最近开发过程感受到的一些问题，感谢公司给予提出问题的机会

提一些我的解决方法，希望能够助力公司的成长和腾飞

-对开发组内的建议
1. 统一代码结构、风格、命名等问题并且达成共识且并实行
2. 对项目进行架构设计，以支持后续的功能迭代
	2.1 引入MVP等设计模式，规范基础的开发过程
	2.2 拆分基础功能模块、业务功能模块，为后续组件化打好基础

-对项目开发的建议，是否可以渐进的实行敏捷模式
1.组建项目Team：
	开发、测试、产品、业务组成开发Team，设立项目Owner
2.交付周期达成共识-开发周期、测试周期、发布、部署周期
3.工作流标识项目流转状态：
	需求提出->需求明确->进入排期->进入开发->进入测试->测试完成->进入发布
	每一个状态由对应角色在工具上面标识，eg：开发人员标识开发中、开发完成等
4.实行白板站会-白板是看得见的进度，对应人员领取任务后续要在站会更新进度。站会
可以克服大家做到那里开会的一些弊端，提高效率，时间掌握在30分钟左右。
5.克服初期不适应，达成共识

-流程心得
1.项目立项开始全Team成员参加
	1.1.需求梳理-需求review，保证项目组成员对需求的完整理解和认可
	1.2.明白项目目标
	1.3.提高需求到达率和准确率
2.梳理需求-设立需求完成度，达到完成度需求(一个标准)在迭代开始时进入迭代环节
	2.1.Team一起对需求设立标准，达到标准进入迭代否则进入下一个周期
	2.2.运营、产品进一步确认需求流程和核心功能，开发人员关注技术实现方案
3.拆分需求-重要程度、用户路径
	3.1.确认核心功能，达成优先级共识
	3.2.后续迭代进行功能完善、补充
4.任务领取
	4.1.明确时间
	4.2.时间预估有困难-个人预估时间->对比->讨论
	4.3.每日站会更新时间
	4.4.每日站会对相关依赖任务说明，风险预报
5.测试用例-冒烟测试
	5.1.开发完成后需要通过冒烟测试，通过比例Team共同达成共识
6.提测
	6.1.QA进行测试工作
	6.2.产品、运营参与体验
7.回归、总结

-敏捷过程的一些体验
1.最小可用交付，不求大而全
2.开发过程需要架构和设计，但是不需要太细设计，以任务为目标
3.迭代周期持续重构-迭代时间需要考虑重构，方式技术债累计~~！
4.站会很好、白板很好，看得见的进度
5.回归、总结很重要，是持续进度比较重要的点，需要有具体的产出
6.大家是一个Team，产品狗、程序猿就会是开玩笑的说，业务部门、产品部门、开发部门
之间的了解增强，相互更加信任。个人成长、表达都有进步
7.可持续的开发进度，开发进度不是越快越好，筋疲力尽的开发过程对效率、个人认同感
影响很大
8.对整体流程参与人员设立考察指标，并对指标达成共识
9.跟踪迭代反馈
